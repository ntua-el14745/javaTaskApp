### Project Report: Task Management System  

#### General Description  

The Task Management System is a standalone Java application designed to assist users in organizing and managing their tasks efficiently. It allows users to create, categorize, prioritize, and track tasks using an intuitive graphical user interface (GUI) built with JavaFX. Key features include task categorization, priority setting, status tracking, reminders for upcoming tasks, and viewing statistics related to task completion.  

The application operates entirely offline, storing task data in structured JSON files for persistence. The modular design and clear separation of concerns ensure ease of maintenance and scalability for future enhancements.  

---

#### Design and Implementation  

**1. Overall Structure**  

The application follows an object-oriented design, with the core logic encapsulated in Java classes and the user interface managed via JavaFX. The main components include:  
- **Task Management:** Handles task creation, updates, and deletion.  
- **Data Persistence:** Utilizes JSON files to store tasks, categories, and priorities.  
- **User Interface:** Provides scenes for creating, viewing, and managing tasks, with a consistent layout and intuitive navigation.  

**2. Class Design**  

The system's functionality is structured into the following key classes:  
- **`Task` Class:** Represents an individual task, encapsulating attributes such as title, description, category, priority, status, and deadline.  
- **`Category` and `Priority` Classes:** Represent task categories and priorities, ensuring modularity and allowing dynamic additions without altering the core logic.  
- **`TaskManager` Singleton Class:** Acts as the central controller for managing tasks, handling data loading and saving to JSON, and providing filtered views of tasks based on status or category.  
- **`TaskStatus` Enum:** Defines the lifecycle states of a task, such as `OPEN`, `IN_PROGRESS`, and `COMPLETED`, ensuring consistent handling of statuses throughout the application.  

The application's UI is tightly integrated with the backend through JavaFX controllers. Each scene is linked to a specific controller that manages user interactions and updates the application state accordingly.  

---

#### JSON Data Structure  

**1. Tasks JSON**  
Tasks are stored in an array structure, where each task is represented as an object with attributes such as title, description, deadline, status, category, and priority.  

Example:  
```json  
{
  "tasks": [
    {
      "title" : "Task 21 dec",
      "description" : "testing task",
      "category" : {
        "name" : "Personal"
      },
      "priority" : {
        "name" : "High"
      },
      "deadline" : [ 2025, 1, 1 ],
      "id" : "58571fa2-4668-442a-9fd1-a610604f1e68",
      "status" : "OPEN",
      "reminders" : [ {
        "reminderDate" : [ 2024, 12, 25 ],
        "relatedTask" : "58571fa2-4668-442a-9fd1-a610604f1e68",
        "reminderType" : "ONE_WEEK_BEFORE",
        "message" : "Default Reminder Message",
        "notified" : false,
        "id" : "1707360f-f91f-49d7-9c95-381560b14de0"
      }, {
        "reminderDate" : [ 2024, 12, 31 ],
        "relatedTask" : "58571fa2-4668-442a-9fd1-a610604f1e68",
        "reminderType" : "ONE_DAY_BEFORE",
        "message" : "Default Reminder Message",
        "notified" : false,
        "id" : "10f57d50-62de-41b8-a1e3-35587179d172"
      } ],
      "reminderDate" : [ 2024, 12, 25 ],
      "titleProp" : {
        "value" : "Task 21 dec",
        "bean" : null,
        "name" : "",
        "bound" : false,
        "valueSafe" : "Task 21 dec"
      },
      "descriptionProp" : {
        "value" : "testing task",
        "bean" : null,
        "name" : "",
        "bound" : false,
        "valueSafe" : "testing task"
      }
    }
  ]
}
```  

**2. Categories and Priorities JSON**  
Categories and priorities are maintained in separate JSON arrays to allow dynamic updates. These arrays are loaded during application initialization to populate dropdown menus in the UI.  

Example of Priorities JSON:  
```json  
[ "Default", "High", "Low", "Urgent" ]  
```  
Example of Categories JSON:  
```json  
[ "Work", "Education", "Personal", "Shopping" ]  
```  

This separation ensures flexibility, allowing categories and priorities to be updated without impacting the tasks JSON structure.  

(Reminders JSON store the same data as the reminders field in Tasks)

---

#### Functionality Highlights  

**1. Task Management**  
- **Task Creation:** Users can define a title, description, category, priority, and deadline when creating a task.  
- **Task Viewing:** Tasks are displayed in a tree structure organized by categories, providing a clear overview.  
- **Status Updates:** Users can mark tasks as completed, postponed, or delayed, and the system automatically tracks task statuses based on deadlines.  

**2. Reminders**  
- **Application-Based Reminders:** The app now includes reminders for upcoming tasks, notifying users within the interface. External OS-level reminders remain unimplemented but could be added in future iterations.  

**3. Statistics**  
The application provides a visual overview of total tasks, completed tasks, and delayed tasks in a horizontal statistics bar. This allows users to assess their productivity at a glance.  

---


#### Assumptions  

1. **Data Integrity:** It is assumed that all JSON files are valid and properly formatted. The application does not include error handling for corrupt or incomplete JSON data.  
2. **Task Uniqueness:** Tasks are assumed to have unique titles for identification within the system.  
3. **Standalone Usage:** The application operates offline, without network connectivity or cloud-based synchronization.  


