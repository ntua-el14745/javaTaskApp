### Αναφορά για τη Δομή και τον Σχεδιασμό της Υλοποίησης

#### 1. Γενική Περιγραφή Σχεδιασμού Υλοποίησης

Η εφαρμογή έχει σχεδιαστεί ως ένα σύστημα διαχείρισης εργασιών που βασίζεται στη Java και χρησιμοποιεί JSON αρχεία για την αποθήκευση δεδομένων. Το σύστημα αποτελείται από τις εξής βασικές οντότητες:
- **Task**: Αντιπροσωπεύει μια εργασία που μπορεί να έχει τίτλο, περιγραφή, προθεσμία, προτεραιότητα, κατηγορία, κατάσταση και υπενθυμίσεις.
- **Reminder**: Αντιπροσωπεύει υπενθυμίσεις που συνδέονται με συγκεκριμένες εργασίες.
- **Category** και **Priority**: Διατηρούν προκαθορισμένες τιμές που χρησιμοποιούνται από τις εργασίες.

Η εφαρμογή οργανώνεται γύρω από έναν βασικό ελεγκτή (`TaskManager`) που αναλαμβάνει τη διαχείριση όλων των δεδομένων και τη φόρτωσή τους από JSON αρχεία. Παράλληλα, υπάρχουν οπτικοποιημένοι ελεγκτές (JavaFX) που υποστηρίζουν την αλληλεπίδραση με τον χρήστη.

---

#### 2. Περιγραφή Δομής των JSON Αρχείων

##### **1. tasks.json**
- Περιέχει όλες τις εργασίες που έχουν δημιουργηθεί από τον χρήστη.
- Δομή:
  ```json
  [
    {
      "id": "unique-task-id",
      "title": "Task Title",
      "description": "Task Description",
      "priority": { "name": "High" },
      "category": { "name": "Work" },
      "status": "PENDING",
      "deadline": "2024-12-01",
      "reminders": ["reminder-id-1", "reminder-id-2"]
    }
  ]
  ```
- **Εξήγηση**:
  - Το `id` είναι μοναδικό για κάθε εργασία.
  - Οι προτεραιότητες (`priority`) και κατηγορίες (`category`) αναπαρίστανται ως αντικείμενα.
  - Τα `reminders` περιέχουν λίστα των αναγνωριστικών υπενθυμίσεων που σχετίζονται με την εργασία.

##### **2. reminders.json**
- Περιέχει όλες τις υπενθυμίσεις που έχουν οριστεί.
- Δομή:
  ```json
  [
    {
      "id": "unique-reminder-id",
      "relatedTask": "task-id",
      "reminderDate": "2024-11-30",
      "reminderTime": "15:00"
    }
  ]
  ```
- **Εξήγηση**:
  - Το `relatedTask` είναι το αναγνωριστικό της εργασίας που συνδέεται με την υπενθύμιση.

##### **3. categories.json**
- Περιέχει τις κατηγορίες που έχουν δημιουργηθεί από τον χρήστη ή είναι προκαθορισμένες.
- Δομή:
  ```json
  ["Work", "Personal", "Shopping"]
  ```

##### **4. priorities.json**
- Περιέχει τις προτεραιότητες που έχουν δημιουργηθεί από τον χρήστη ή είναι προκαθορισμένες.
- Δομή:
  ```json
  ["High", "Medium", "Low"]
  ```

---

#### 3. Μη Υλοποιημένες Λειτουργικότητες

1. **Περισσότερες ενέργειες για τις υπενθυμίσεις**: Ενώ οι υπενθυμίσεις μπορούν να προστεθούν ή να διαγραφούν, δεν υπάρχει λειτουργικότητα για επεξεργασία ή ειδοποιήσεις.
2. **Αναφορές καθυστερημένων εργασιών**: Ενώ οι εργασίες μπορούν να μαρκάρονται ως καθυστερημένες, δεν υπάρχει πλήρης αναφορά για αυτές.
3. **Διαχείριση πολλών χρηστών**: Η εφαρμογή υποστηρίζει μόνο έναν χρήστη ανά χρονική στιγμή.
4. **Ενσωμάτωση ειδοποιήσεων στο λειτουργικό σύστημα**.

---

#### 4. Παραδοχές

1. **Δομή JSON**: Όλα τα αρχεία JSON θεωρείται ότι είναι σε σωστή μορφή και δεν περιέχουν ασυμβατότητες (π.χ., μη έγκυρα IDs).
2. **Απλότητα χρήσης**: Ο χρήστης μπορεί να ορίσει προτεραιότητες και κατηγορίες πριν δημιουργήσει εργασίες.
3. **Φορτωμένη κατάσταση**: Το σύστημα ξεκινά πάντα φορτώνοντας όλα τα δεδομένα από τα JSON αρχεία.

---

Η παραπάνω υλοποίηση βασίζεται στην απλότητα και επεκτασιμότητα. Η χρήση JSON για αποθήκευση επιτρέπει ευκολία στη διαχείριση και ενσωμάτωση σε μελλοντικά συστήματα.